/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Controller;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author Annamari
 */
public class Panel extends javax.swing.JPanel implements KeyListener{

    private long pressTime1, pressTime2, releaseTime1, releaseTime2;
    private double flightTimeT1, flightTimeT2, flightTimeT3, flightTimeT4, dwellTime;
    private Controller controller;
    private int i;
    /**
     * Creates new form Panel
     */
    public Panel(){
        initComponents();
        setting();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtInput1 = new javax.swing.JTextField();
        lblEredmeny = new javax.swing.JLabel();
        txtInput2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        txtInput1.setMinimumSize(new java.awt.Dimension(6, 30));
        txtInput1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInput1FocusLost(evt);
            }
        });

        lblEredmeny.setFont(new java.awt.Font("Roboto", 0, 48)); // NOI18N
        lblEredmeny.setText("jLabel1");

        txtInput2.setMinimumSize(new java.awt.Dimension(6, 30));
        txtInput2.setPreferredSize(new java.awt.Dimension(59, 30));
        txtInput2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInput2FocusLost(evt);
            }
        });

        jLabel1.setText("Írja be kétszer jelszavát!");

        jLabel2.setText("Jelszó:");

        jLabel3.setText("Jelszó mégegyszer:");

        jButton1.setText("Adatok mentése");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Kiértékelés");
        jButton2.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblEredmeny)
                                    .addComponent(txtInput2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtInput1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEredmeny)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        controller.saveToDataBase(txtInput1.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtInput1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInput1FocusLost
        txtInput1.setEnabled(false);
        controller.addTyping();
        i = 0;
    }//GEN-LAST:event_txtInput1FocusLost

    private void txtInput2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInput2FocusLost
        txtInput2.setEnabled(false);
        controller.addTyping();
        i = 0;
    }//GEN-LAST:event_txtInput2FocusLost

    public Controller getController() {
        return controller;
    }

    public void setController(Controller controller) {
        this.controller = controller;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblEredmeny;
    private javax.swing.JTextField txtInput1;
    private javax.swing.JTextField txtInput2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if(i%2==0){
            pressTime1 = e.getWhen();
            if(i!=2)
            {
                flightTimeT1 = ((double)(pressTime1-releaseTime2))/1000;
                //flightTimeT3 = ((double)(pressTime1-pressTime2))/1000;
                controller.addFlightTimeT1(flightTimeT1);
               // controller.addFlightTimeT3(flightTimeT3);
            }
            
        }
        else{
            pressTime2 = e.getWhen();
            flightTimeT1 = ((double)(pressTime2-releaseTime1))/1000;
            //flightTimeT3 = ((double)(pressTime2-pressTime1))/1000;
            controller.addFlightTimeT1(flightTimeT1);
            //controller.addFlightTimeT3(flightTimeT3);
        }        
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
        if(i%2==0){
            releaseTime1 = e.getWhen();
            dwellTime = ((double)(releaseTime1-pressTime1))/1000;
            /*if(i!=2)
            {
                flightTimeT2 = ((double)(releaseTime1-releaseTime2))/1000;
                flightTimeT4 = ((double)(releaseTime1-pressTime2))/1000;
                controller.addFlightTimeT2(flightTimeT2);
                controller.addFlightTimeT4(flightTimeT4);
            }*/
            
            controller.addDwellTime(dwellTime);
        }
        else if((i%2)!=0){ 
            releaseTime2 = e.getWhen();
            dwellTime = ((double)(releaseTime2-pressTime2))/1000;
           // flightTimeT2 = ((double)(releaseTime2-releaseTime1))/1000;
            //flightTimeT4 = ((double)(releaseTime2-pressTime1))/1000;
            //controller.addFlightTimeT2(flightTimeT2);
            //controller.addFlightTimeT3(flightTimeT3);
            controller.addDwellTime(dwellTime);
        }
        i++;
    }

    private void setting() {
        txtInput1.addKeyListener(this);
        txtInput2.addKeyListener(this);
        i = 2;
    }
    
    
}
